--[[
    @rikky_buffer.anm
    ver1.0
    (車輪の再発明)
]]
-------------------------------------------------------------------------------------------
@画像データの保存
--track0:id,0,1000,1,1
--check0:ﾌﾚｰﾑﾊﾞｯﾌｧ参照,0
--dialog:仮想ﾊﾞｯﾌｧ行/chk,_1=0;α値参照/chk,_2=0;injection,_0=nil;


local id=_0 or obj.track0
local check_frm=obj.check0
local check_tmp=_1 ~=0
local check_a=_2 ~=0
_0=nil
_1=nil
_2=nil

require("rikky_buffer")
-- obj.load("framebuffer")
--copybuffer
if(check_frm) then  safe_copybuffer("obj","frm")    end
if(check_tmp) then  safe_copybuffer("tmp","obj")    end

obj.effect()

--write
if(check_a) then
    rikky_buffer.write2(id,obj.alpha)
else
    rikky_buffer.write(id,check_tmp)
end

-- debug_print("empty_id="..rikky_buffer.freeid())
-- use_id=rikky_buffer.useid()
-- for i=1,#use_id do
--     debug_print("use_id="..use_id[i])
-- end


--メモリ解放 
id=nil
check_frm=nil
check_tmp=nil
check_a=nil
collectgarbage("collect")

-------------------------------------------------------------------------------------------
@保存データの読み込み
--track0:id,0,1000,1,1
--check0:座標値等を引継,0
--dialog:injection,_0=nil;


local id=_0 or obj.track0
local check_coo=obj.check0
_0=nil
require("rikky_buffer")

--read&get
if(check_coo) then
    rikky_buffer.read2(id)

    -- local pixeltable,wa,ha=rikky_buffer.get2(id)
    -- local ffi=require"ffi"
    -- ffi.cdef[[
    --     typedef struct { uint8_t b,g,r,a; } PixelBGRA;
    -- ]]
    -- local ub,w,h=obj.getpixeldata()
    -- local cd=ffi.cast("PixelBGRA*",ub)
    -- for y=0,h-1 do
    --     for x=0,w-1 do
    --         p=cd[x+y*w]
    --         p.a=pixeltable.A[x+y*wa+1] or 255
    --         p.r=pixeltable.R[x+y*wa+1] or 0
    --         p.g=pixeltable.G[x+y*wa+1] or 0
    --         p.b=pixeltable.B[x+y*wa+1] or 0
    --     end
    -- end
    -- obj.putpixeldata(ub)

    local user,wb,hb=rikky_buffer.get(id)
    obj.putpixeldata(user)
    user,wb,hb=nil,nil,nil

else
    rikky_buffer.read(id)
    local user,wb,hb=rikky_buffer.get(id)
    obj.putpixeldata(user)

    user,wb,hb=nil,nil,nil
end

--メモリ解放
id=nil
check_coo=nil
collectgarbage("collect")

-------------------------------------------------------------------------------------------
@保存データの消去
--track0:id,0,1000,1,1
--check0:全消し,0
--dialog:injection,_0=nil;


local id=_0 or obj.track0
local check_all=obj.check0
_0=nil
require("rikky_buffer")

if(check_all) then
    local use_id=rikky_buffer.useid()
    local limit=use_id[1] or 1
    for i=1,#use_id do
        limit=(limit<use_id[i]) and use_id[i] or limit
    end

    -- rikky_buffer.clean2()
    for i=0,limit do
        rikky_buffer.clean(i)
    end

    limit,use_id=nil,nil
else
    rikky_buffer.clean(id)
end

--メモリ解放
id=nil
check_all=nil
collectgarbage("collect")

-------------------------------------------------------------------------------------------
@保存データの複製
--track0:dst_id,0,1000,2,1
--track1:src_id,0,1000,1,1
--check0:上書き,1
--dialog:injection,_0=nil;


_0=_0 or {}
local dst_id=_0[1] or obj.track0
local src_id=_0[2] or obj.track1
local overwrite=obj.check0
_0=nil

require("rikky_buffer")

if (overwrite) then
    rikky_buffer.copy(dst_id,src_id)
else
    rikky_buffer.copy2(dst_id,src_id)
end

--メモリ解放
dst_id=nil
src_id=nil
overwrite=nil
collectgarbage("collect")