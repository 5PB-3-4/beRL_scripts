--[[
    ガラス描画スクリプト
]]

----------------------------------------------------------------------------------------------------------------------
--設定項目--
----------------------------------------------------------------------------------------------------------------------
-- glassdraw_init関数
-- glassdraw関数
-- 	ガラスで屈折するように描画することができます
-- 	glassdraw_init関数で初期化と設定をして、glassdraw関数で描画をします
-- 	rikky_module.glassdraw_inti(table)
-- 	引数のテーブルにさまざまなキーを設定します
-- 	color       : 屈折して表示するイメージを単色化させる色の数値
-- 	reverse     : 上下左右反転を有効ならば1、無効ならば0の数値
-- 	reverseUp   : 上下反転を有効ならば1、無効ならば0の数値
-- 	reverseSide : 左右反転を有効ならば1、無効ならば0の数値
-- 	blur        : ぼかす範囲の数値
-- 	refractive  : 0から1までの屈折率の数値
-- 	offsetZ     : フレームバッファまでの仮想的な高さの数値
-- 	boundary    : 屈折する光が四隅、四辺を超えたときの処理の仕方を決める文字列
-- 		      "loop"     : 境界までくると反対側からループしてような処理になります
-- 		      "inverted" : 境界より先はイメージが反転した処理になります
-- 		      設定なし   : 境界の色を引き延ばした処理になります
-- 	async       : 取得する背景を同期するならば1、しない場合は0の数値
-- 	culling     : 裏面を非表示にするならば1、しない場合は0の数値
-- 	zoom        : 映し出す画像を拡大縮小させるときに設定する数値で、1だと等倍、2だと2倍のようになります
-- 	lens        : ガラスの面に凹凸を決める文字列
-- 		      "convex"  : 凸レンズ気味に映し出されるようになります
-- 		      "concave" : 凹レンズ気味に映し出されるようになります
-- 	各キーは必要なものだけ設定することも可能です
-- 	つまり常にこれらのキーに数値や文字列を指定する必要がないわけです
-- 	glassdraw_init関数で設定して、glassdraw関数で描画する間にobj.loadなど新しくイメージを読み込む処理をすると思わぬ事態になるかもしれません
-- 	obj.loadなどは使わないようにしてください
-- 	rikky_module.glassdraw関数で描画します
-- 	引数はobj.drawかobj.drawployと同じようにx座標などを渡します
-- 	どちらになるかは引数の数で自動で判断します


----------------------------------------------------------------------------------------------------------------------
--GUI--
----------------------------------------------------------------------------------------------------------------------
--track0:レイヤー,0,100,0,1
--track1:外部連携,0,1,0,1
--check0:出力,0
--dialog:色/col,_1=0xff0000;反転,_2="";ぼかし範囲,_3=0;屈折率,_4=0;仮想深度,_5=0;境界処理,_6="";背景同期/chk,_7=0;裏面非表示/chk,_8=0;拡縮倍率,_9=1;レンズ凹凸/chk,_10=0;


----------------------------------------------------------------------------------------------------------------------
--変数--
----------------------------------------------------------------------------------------------------------------------
require"rikky_module"
-- rikky_module.colordialog(1,_1)
-- rikky_module.checkbox(7,8,10)
rikky_module.list(2,{"上下のみ","左右のみ","上下左右"},6,{"loop","inverted","NULL"})

local slider0 = obj.track0
local slider1 = obj.track1
-- local slider2 = obj.track2
-- local slider3 = obj.track3

local switch0 = obj.check0

local uni_c = _1
local rever = _2
local boksi = _3
local refra = _4
local depth = _5
local bordr = _6
local synch = _7
local cuull = _8
local zooom = _9
local image = _10

----------------------------------------------------------------------------------------------------------------------
--準備--
----------------------------------------------------------------------------------------------------------------------
local rev = {}
lay ={}
local er = (slider0 ~= 0) and slider0 or obj.layer

rev[1] = (rever == "上下左右") and 1 or 0
rev[2] = (rever == "上下のみ") and 1 or 0
rev[3] = (rever == "左右のみ") and 1 or 0

bordr = (bordr ~= "NULL" ) and bordr or nil

local reference = {
    color = uni_c,
    reverse = rev[1],
    reverseUp = rev[2],
    reverseSide = rev[3],
    blur = boksi,
    refractive = refra,
    offsetZ = depth,
    boundary = bordr,
    async = synch,
    culling = cuull,
    zoom = zooom,
    lens = image 
}



----------------------------------------------------------------------------------------------------------------------
--変数破棄--
----------------------------------------------------------------------------------------------------------------------
_1 = nil
_2 = nil
_3 = nil
_4 = nil
_5 = nil
_6 = nil
_7 = nil
_8 = nil
_9 = nil
_10= nil

----------------------------------------------------------------------------------------------------------------------
--出力/ログ--
----------------------------------------------------------------------------------------------------------------------
if switch0 then
    rikky_module.glassdraw_init(reference)
    rikky_module.glassdraw()
else
    if slider1==1 then
        lay[er] = {reference = reference}
    end

--     print("イメージ単色 : "..string.format("%x",reference.color))
--     print("上下左右反転 : "..reference.reverse)
--     print("上下反転 : "..reference.reverseUp)
--     print("左右反転 : "..reference.reverseSide)
--     print("ぼかし : "..reference.blur)
--     print("屈折率 : "..reference.refractive)
--     print("仮想高さ : "..reference["offsetZ"])
--     print("隅と辺処理 : "..reference["boundary"])
--     print("取得背景同期 : "..reference["async"])
--     print("裏面表示 : "..reference["culling"])
--     print("画像倍率 : "..reference["zoom"])
--     print("レンズ凹凸 : "..reference["lens"])
--     print("-----------------------------------------------------------------")
end

----------------------------------------------------------------------------------------------------------------------
--メモリ解放--
----------------------------------------------------------------------------------------------------------------------
slider0 = nil
slider1 = nil
-- slider2 = nil
-- slider3 = nil
switch0 = nil

uni_c = nil
rever = nil
boksi = nil
refra = nil
depth = nil
bordr = nil
synch = nil
cuull = nil
zooom = nil
image = nil

rev = nil
ler = nil 

collectgarbage("collect")