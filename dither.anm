--[[
	bayer dithering
	version 1.1.1
]]

--track0:階調_赤,1,256,8,1
--track1:階調_緑,1,256,8,1
--track2:階調_青,1,256,8,1
--track3:bayer,1,10,2,1
--check0:マップ表示,0
--dialog:減色のみ/chk,_1=0;マップ指定/chk,_2=0;指定マップ,_3={{0,1,2},{3,4,5},{6,7,8}};係数,_4=9;ver1_0/chk,_5=0;

-------------------------------------------------------------------------------------------
--GUI
-------------------------------------------------------------------------------------------
local slider0	=	obj.track0
local slider1	=	obj.track1
local slider2	=	obj.track2
local slider3	=	obj.track3
local switch0	=	obj.check0

local reduced	=	_1 ~=0
local map		=	_2 ~=0
local custom	=	_3
local coef		=	_4
local transpose	=	_5 ~=0
_1=nil
_2=nil
_3=nil
_4=nil
_5=nil

-------------------------------------------------------------------------------------------
--閾値マップ
-------------------------------------------------------------------------------------------
local M		=	{}
local Ma	=	{}

for i=1,2^slider3,1 do
	M[i]={}
	Ma[i]={}
	
	for j=1,2^slider3,1 do
		Ma[i][j]=0
	end
end

for n=1,slider3 do
	for i=1,2^n,1 do
		for j=1,2^n,1 do
			
			if(i<=2^(n-1)) then
				if(j<=2^(n-1)) then
					M[i][j]=4*Ma[i][j]
				else
					M[i][j]=Ma[i][j-2^(n-1)]+2
				end
			
			else
				if(j<=2^(n-1)) then
					M[i][j]=Ma[i-2^(n-1)][j]+3
				else
					M[i][j]=Ma[i-2^(n-1)][j-2^(n-1)]+1
				end
			end
		
			Ma[i][j]=M[i][j]
			--print(M[i][j].." : ")
		end
	--print("\n")
	end
--print("-----------------------------------------------------------\n")
end
--print(M[4][2])

-------------------------------------------------------------------------------------------
--patch.aulのコンソール画面にしきい値マップの要素を表示（重いので確認後はオフにしておいてね！）
-------------------------------------------------------------------------------------------
if(switch0) then
	print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n")
	print("しきい値マップ\n")
	if(map) then
		for i=1,#custom do
			for j=1,#custom[i] do
				print("閾値マップの".." ("..i..","..j..") 番目の要素 : "..custom[i][j])
			end
			print("-----------------------------------------------------------\n")
		end
		print("係数:"..coef)
	else
		for i=1,2^slider3 do
			for j=1,2^slider3 do
				print("閾値マップの".." ("..i..","..j..") 番目の要素 : "..M[i][j])
			end
			print("-----------------------------------------------------------\n")
		end
		print("係数:(2n)^2="..(2^slider3)^2)
	end
end

-------------------------------------------------------------------------------------------
--色の調整
-------------------------------------------------------------------------------------------
local ffi=require"ffi"
ffi.cdef[[
typedef struct { uint8_t b,g,r,a; } PixelBGRA;
]]

local ub,w,h=obj.getpixeldata()
local cd=ffi.cast("PixelBGRA*",ub)

for y=0,h-1 do
	for x=0,w-1 do
		local p=cd[x+y*w]
		local bgra
		
		local bb=math.floor(p.b/(256/slider2))*256/slider2
		local gb=math.floor(p.g/(256/slider1))*256/slider1
		local rb=math.floor(p.r/(256/slider0))*256/slider0
		
		if(map) then
			bgra=math.floor(255*(custom[y%#custom+1][x%#custom[y%#custom+1]+1]))/coef
		else
			if(transpose) then
				bgra=math.floor(255*(M[x%(2^slider3)+1][y%(2^slider3)+1]+1)/((2^slider3)^2))
			else
				bgra=math.floor(255*(M[y%(2^slider3)+1][x%(2^slider3)+1]+1)/((2^slider3)^2))
			end
		end

		if(reduced) then
			p.b=bb
			p.g=gb
			p.r=rb
		else
			p.b=(bb>bgra) and 255 or 0
			p.g=(gb>bgra) and 255 or 0
			p.r=(rb>bgra) and 255 or 0
		end
	end
end
obj.putpixeldata(ub)

-------------------------------------------------------------------------------------------
--メモリを開けるために変数にnilを詰めてガベージコレクションを行う
-------------------------------------------------------------------------------------------
M=nil
Ma=nil
slider0=nil
slider1=nil
slider2=nil
slider3=nil
switch0=nil

reduced		=	nil
map			=	nil
custom		=	nil
coef		=	nil
transpose	=	nil

ffi=nil
ub,w,h=nil,nil,nil
cd=nil

collectgarbage("collect")
-- debug_print("used memory by lua = "..string.format("%4.3f",collectgarbage("count")).." kbyte")


-- debug_print("check_collectgarbage_"..collectgarbage("count"))
-- debug_print("do_collectgarbage_"..collectgarbage("collect"))
-- debug_print("re_check_collectgarbage_"..collectgarbage("count").."\n")
-------------------------------------------------------------------------------------------
--[[
参考にしたページ
https://ocw.kyoto-u.ac.jp/wp-content/uploads/2021/03/2004_gazoushoriron_05.pdf
https://ja.wikipedia.org/wiki/%E9%85%8D%E5%88%97%E3%83%87%E3%82%A3%E3%82%B6%E3%83%AA%E3%83%B3%E3%82%B0
https://dailyportalz.jp/kiji/retro_PC_game-mitaina-shashin
https://scrapbox.io/aviutl/obj.getpixeldata
http://aows.jp/imgprc/material/06/
]]