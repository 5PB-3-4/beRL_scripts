--[[
    color_sparate_pixel.anm
    ver1.0
	@noiz_glit.anmのmode1〜4までの機能を分離させたものです。こっちの方が動作が軽いし機能も増やしました
    なんか拡大率のトラックバーいじると挙動おかしいけど面白い感じになるので仕様ということで...
]]

--track0:分割_縦,1,100,1,1
--track1:分割_横,1,100,1,1
--track2:seed,0,1000,0,1
--check0:時間色変化,0
--dialog:縦グリット隔幅,_1=1;横グリット隔幅,_2=1;色1/col,_3=0xa06fc4;色2/col,_4=0x6fbac4;色3/col,_5=0xfbe175;色4/col,_6=0xf6a04b;ﾗﾝﾀﾞﾑ色/chk,_7=0;透明度ﾗﾝﾀﾞﾑ/chk,_8=0;類似色/chk,_9=0;正方形分割/chk,_10=0;

-------------------------------------------------------------------------------------------
--	各パラメータ設定
-------------------------------------------------------------------------------------------
--[[
トラックバー
0	分割_縦		：画面の分割して表示する四角形の列の個数
1	分割_横		：画面の分割して表示する四角形の行の個数
2	seed		：randam表示している色のseed値

チェックボックス
0	時間色変化	：表示しているオブジェクトの色がフレームの変化で変わります

設定ダイアログ(最大16こ)
1	縦グリット隔幅	：縦の色を数字単位で変化
2	横グリット隔幅	：縦の色を数字単位で変化
3	色1				：４色ランダムを使う際の色
4	色2				：４色ランダムを使う際の色
5	色3				：４色ランダムを使う際の色
6	色4				：４色ランダムを使う際の色
7	ﾗﾝﾀﾞﾑ色			：要素色をランダムで変化させます
8	透明度ﾗﾝﾀﾞﾑ		：透明度をランダムで変化させます
9	類似色			：要素色を色1の周辺色で構成します
10	正方形分割		：分割した時の四角形を正方形にする
]]

-------------------------------------------------------------------------------------------
--GUI
-------------------------------------------------------------------------------------------
local slider0	= obj.track0
local slider1	= obj.track1
local slider2	= obj.track2
local switch0	= obj.check0

local wide_interval		=	math.abs(_1) or 1
local height_interval	=	math.abs(_2) or 1
local col_select		=   {_3,_4,_5,_6}
local rand_col			=	_7 ~=0
local alpha				=	_8 ~=0
local luminance			=	_9 ~=0
local square			=	_10 ~=0

--変数廃棄
_1	=	nil
_2	=	nil
_3	=	nil
_4	=	nil
_5	=	nil
_6	=	nil
_7	=	nil
_8	=	nil
_9	=	nil
_10 =	nil

local ffi=require"ffi"
ffi.cdef[[
	typedef struct { uint8_t b,g,r,a; } PixelBGRA;
]]

local ud,w,h = obj.getpixeldata()
local cd=ffi.cast("PixelBGRA*",ud)

local flame_chenge	=	(switch0) and obj.frame or 1
w,h=w*obj.getvalue("zoom")/100,h*obj.getvalue("zoom")/100
slider1 =   (square) and math.floor(slider0*h/w) or slider1

-------------------------------------------------------------------------------------------
--色
-------------------------------------------------------------------------------------------
local colour2 = function(ri,rj,rw,rh)
	local HSB_
	local seed = slider2*( math.floor( ri/(rw/slider0)/wide_interval ) + math.floor( rj/(rh/slider1)/height_interval )*rw+1 )

	if(rand_col) then	
		HSB_	=	HSV( math.floor(obj.rand(0,255,seed,flame_chenge)), math.floor(obj.rand(0,100,seed,flame_chenge)), math.floor(obj.rand(0,100,seed,flame_chenge)) )
	else
		local rand_select	=	obj.rand(1,#col_select,seed,flame_chenge)
		HSB_	=	col_select[rand_select]
	end
	seed = nil
	return HSB_
end

-------------------------------------------------------------------------------------------
--出力
-------------------------------------------------------------------------------------------
for y=0,h-1 do 
	for x=0,w-1 do
		local p=cd[x+y*w]

			p.r,p.g,p.b=RGB(colour2(x,y,w,h))
			if(alpha) then 
				if(p.a==0) then
					p.a=0
				else
					p.a=obj.rand(0,255,slider2*( math.floor( x/(w/slider0)/wide_interval ) + math.floor( y/(h/slider1)/height_interval )*h+1 ),flame_chenge)
				end

			end
	end
end
obj.putpixeldata(ud)

if(luminance) then
	obj.effect("単色化","強さ",100,"輝度を保持する",1,"color",col_select[1])
end

-------------------------------------------------------------------------------------------
--メモリ解放
-------------------------------------------------------------------------------------------
slider0	= nil
slider1	= nil
slider2	= nil
switch0	= nil

wide_interval =	nil
height_interval	= nil
col_select = nil
rand_col = nil
alpha = nil
luminance = nil
square = nil
flame_chenge =nil
ffi=nil
ud,w,h = nil,nil,nil
cd=nil

collectgarbage("collect")